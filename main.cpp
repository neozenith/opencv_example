/* Author: Josh Peak <neozenith.dev@gmail.com>
 * Date: 2017-JAN-13
 * */

//opencv
#include <opencv2/highgui.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/video.hpp>

//C++
#include <sstream>
#include <iostream>
#include <string>

// Project
#include "main.h"

using namespace cv;
using namespace std;

// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard

void usage(){
  printf(" Usage: test [option] filename\n");
  printf("\t-i, --image\tDisplay filtered image\n");
  printf("\t-v, --video\tDisplay filtered video\n");
  printf("\t-c, --camera\tDisplay filtered webcamera stream. Uses default camera.\n");
}

int main( int argc, char** argv )
{

  for ( int i = 0; i < argc; i++)
  {
    printf("arg[%d] = %s\n", i, argv[i]);
  }

  // Check number of arguments
  if( argc < 2)
  {
    usage();
    return -1;
  }

  int exitValue = 0;
  string argOpt (argv[1]);

  namedWindow("Original");
  namedWindow("Filter");
  namedWindow("MOG2");
  namedWindow("Masked");

  if ( argOpt == "-i" || argOpt == "--image" )
  {
    exitValue = showImage(argv[2]);
  }
  else if ( argOpt == "-v" || argOpt == "--video" )
  {
    exitValue = showVideo(argv[2]);
  }
  else if ( argOpt == "-c" || argOpt == "--camera" )
  {
    exitValue = showCamera();
  }

  destroyAllWindows();
  return exitValue;
}

int showImage(char* filename)
{
  Mat image, display, edges;
  image = imread(filename, CV_LOAD_IMAGE_COLOR);   // Read the file

  if(! image.data )                              // Check for invalid input
  {
    cout <<  "Could not open or find the image" << std::endl ;
    return -1;
  }

  display = scale(image, 4); // scale down image
  edges = applyFilter(display);

  imshow("Original", display );                   // Show our image inside it.
  imshow("Filter", edges );                   // Show our image inside it.
  //resizeWindow(window_name, 800, 600);
  waitKey(0);                                          // Wait for a keystroke in the window
  return 0;
}

int showVideo(char* filename)
{
  VideoCapture cap(filename);
  if(!cap.isOpened())  // check if we succeeded
    return -1;

  Mat edges, fgMaskMOG2_small, masked;
  pMOG2 = createBackgroundSubtractorMOG2();

  while( (char)keyboard != 'q' && (char)keyboard != 27 ){
    Mat frame;
    cap >> frame; // get a new frame from camera

    pMOG2->apply(frame, fgMaskMOG2);
    frame.copyTo(masked, fgMaskMOG2);
    edges = applyFilter(frame);

    //scale down
    frame             = scale(frame, 2);
    edges             = scale(edges, 2);
    fgMaskMOG2_small  = scale(fgMaskMOG2, 2);
    masked            = scale(masked, 2);

    imshow("Original", frame );
    imshow("Filter", edges );
    imshow("MOG2", fgMaskMOG2_small );
    imshow("Masked", masked );

    int top = 40;
    moveWindow("Original", 0,top);
    moveWindow("Filter", frame.size().width, top);
    moveWindow("MOG2", 0,frame.size().height + top );
    moveWindow("Masked", frame.size().width, frame.size().height + top );

    keyboard = waitKey(30);
  }
  // the camera will be deinitialized automatically in VideoCapture destructor
  return 0;
}

int showCamera()
{
  VideoCapture cap;

  cap.open(0);
  int deviceID = 0;             // 0 = open default camera
  int apiID = cv::CAP_ANY;      // 0 = autodetect default API
  cap.open(deviceID + apiID);
  if (!cap.isOpened()) {
      cerr << "ERROR! Unable to open camera\n";
      return -1;
  }

  cout << "Start grabbing" << endl
      << "Press any key to terminate" << endl;

  Mat frame, edges, fgMaskMOG2_small, masked;
  pMOG2 = createBackgroundSubtractorMOG2();

  while( (char)keyboard != 'q' && (char)keyboard != 27 ){
    Mat frame;
    cap >> frame; // get a new frame from camera

    pMOG2->apply(frame, fgMaskMOG2);
    frame.copyTo(masked, fgMaskMOG2);
    edges = applyFilter(frame);

    //scale down
    frame             = scale(frame, 2);
    edges             = scale(edges, 2);
    fgMaskMOG2_small  = scale(fgMaskMOG2, 2);
    masked            = scale(masked, 2);

    imshow("Original", frame );
    imshow("Filter", edges );
    imshow("MOG2", fgMaskMOG2_small );
    imshow("Masked", masked );

    int top = 40;
    moveWindow("Original", 0,top);
    moveWindow("Filter", frame.size().width, top);
    moveWindow("MOG2", 0,frame.size().height + top );
    moveWindow("Masked", frame.size().width, frame.size().height + top );

    keyboard = waitKey(30);
  }
  // the camera will be deinitialized automatically in VideoCapture destructor

  return 0;
}

Mat scale(Mat image, int scale)
{
  Mat output;

  resize(image, output, Size(image.size().width / scale, image.size().height / scale));
  return output;
}

Mat applyFilter(Mat image)
{
  Mat output;
  cvtColor(image, output, CV_BGR2GRAY);
  GaussianBlur(output, output, Size(7,7), 1.5, 1.5);
  Canny(output, output, 0, 40, 3);
  return output;
}
